# -*- coding: utf-8 -*-
"""SMLA3Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-y2mP0n322oiQamFjvJF2U4vQNH3umiD
"""

!pip install -q idx2numpy

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
import idx2numpy
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.decomposition import PCA
from sklearn.metrics import confusion_matrix

"""#Question 2"""

#loading the dataset
X_train = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/train-images.idx3-ubyte')
Y_train = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/train-labels.idx1-ubyte')
X_test = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/t10k-images.idx3-ubyte')
Y_test = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/t10k-labels.idx1-ubyte')

X_train.shape

#Reshaping the data from 3d to 2d
X_train = X_train.reshape(len(X_train),X_train.shape[1]*X_train.shape[2])
X_test = X_test.reshape(len(X_test),X_test.shape[1]*X_test.shape[2])
accuracy_list = list()

X_train.shape

# scaler = StandardScaler()
# scaler.fit(X_train)
# X_train = scaler.transform(X_train)
# X_test = scaler.transform(X_test)

#Applying PCA on the given data for n_components = 15
pca_15 = PCA(n_components = 15)
pca_15.fit(X_train)
X_train_15 = pca_15.transform(X_train)
X_test_15 = pca_15.transform(X_test)

#Applying LDA on the transformed data
lda_model = LinearDiscriminantAnalysis()
lda_model.fit(X_train_15,Y_train)

#calculating accuracy
y_pred_15 = lda_model.predict(X_test_15)
accuracy_list.append(lda_model.score(X_test_15,Y_test))
print("Classification metrics for PCA(n_componetns = 15)")
print(classification_report(y_pred_15,Y_test))

#Applying PCA on the given data for n_components = 8
pca_8 = PCA(n_components = 8)
pca_8.fit(X_train)
X_train_8 = pca_8.transform(X_train)
X_test_8 = pca_8.transform(X_test)

# fitting the model and calculating accuracy
lda_model.fit(X_train_8,Y_train)
y_pred_8 = lda_model.predict(X_test_8)
accuracy_list.append(lda_model.score(X_test_8,Y_test))
print(f"On Test: Accuracy={lda_model.score(X_test_8, Y_test):.3f}")
print("Classfication metrics for PCA(n_components = 8)")
print(classification_report(y_pred_8,Y_test))

#Applying PCA on the given data for n_components = 3
pca_3 = PCA(n_components = 3)
pca_3.fit(X_train)
X_train_3 = pca_3.transform(X_train)
X_test_3 = pca_3.transform(X_test)

#fitting the model calculating accuracy
lda_model.fit(X_train_3,Y_train)
y_pred_3 = lda_model.predict(X_test_3)
accuracy_list.append(lda_model.score(X_test_3,Y_test))
print("Classification metrics for PCA(n_components = 3)")
print(classification_report(y_pred_3,Y_test))

experiments = ['Experiment1(n_components = 15)', 'Experiment2(n_components=8)', 'Experiment3(n_components=3)']
print(accuracy_list)

#Plotting accuracy of all three experiments on testing dataset
fig = plt.figure(figsize = (10,5))
plt.bar(experiments,accuracy_list,color = 'pink',width = 0.3)
plt.xlabel("Experiments")
plt.ylabel("Accuracy")
plt.title("Accuracy vs Experiment plot")
plt.show()