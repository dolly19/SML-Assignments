# -*- coding: utf-8 -*-
"""SML_A4_Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zMgmqUaXPX19mRD0Y20Z18HwQcQBj7QT
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip install -q idx2numpy

import pandas as pd
import idx2numpy
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
from sklearn.tree import DecisionTreeRegressor
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from tqdm import tqdm

"""#Question 4

### Bagging Model
"""

#loading the dataset
X_train = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/train-images.idx3-ubyte')
Y_train = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/train-labels.idx1-ubyte')
X_test = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/t10k-images.idx3-ubyte')
Y_test = idx2numpy.convert_from_file('/content/gdrive/MyDrive/ML datasets/SML/mnist/t10k-labels.idx1-ubyte')

X_train.shape

#Reshaping the data from 3d to 2d
X_train = X_train.reshape(len(X_train),X_train.shape[1]*X_train.shape[2])
X_test = X_test.reshape(len(X_test),X_test.shape[1]*X_test.shape[2])
accuracy_list = list()

X_train.shape

#Bagging model
def fit():
  bag =3
  n = X_train.shape[0]
  trees = []
  np.random.seed(123) 

  for b in range(bag):
    sample = np.random.choice(np.arange(n), size = n, replace = True)
    X_train_b = X_train[sample]
    y_train_b = Y_train[sample]
    tree = DecisionTreeClassifier()
    tree.fit(X_train_b, y_train_b)
    trees.append(tree)
  
  return trees

#prediction function
def predict(trees):
  y_test_hats = np.empty((len(trees), len(X_test)))
  for i, tree in enumerate(trees):
      y_test_hats[i] = tree.predict(X_test)
  y_test_hats = y_test_hats.astype(int)
  return y_test_hats

#function for majority voting
def max_Vote(prediction):
  final_prediction  = list()
  for x in range(0,len(prediction[0])):
    predict = prediction[:,x]
    val = np.bincount(predict).argmax()
    final_prediction.append(val)
  return final_prediction

trees = fit()
y_test_hats = predict(trees)
final_prediction = max_Vote(y_test_hats)

#testing accuracy
accuracy = accuracy_score(Y_test,final_prediction)
print("Accuracy : ", accuracy)

#classwise testing accuracy
cm = confusion_matrix(Y_test,final_prediction)
n = len(cm)
print("Class-wise accuracy")
for i in range(n):
  s = cm[i].sum()
  accuracy = cm[i][i]/s
  print("Label",i," - ",accuracy)