# -*- coding: utf-8 -*-
"""SMLA3Q3.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ejDAHU0KKZa-eT1eJshLs5USdZLkRv8b
"""

!pip install -q idx2numpy

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/gdrive')
# %cd '/content/gdrive/MyDrive/ML datasets/SML/fminst'
# %ls

import numpy as np
import pandas as pd
import idx2numpy
import matplotlib.pyplot as plt
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.metrics import confusion_matrix

"""#Question 3"""

#loading the dataset
train = pd.read_csv('fashion-mnist_train.csv')
test = pd.read_csv('fashion-mnist_test.csv')

#sorted the dataset by label
train = train.sort_values(by='label')
test = test.sort_values(by='label')

#splitting into features and label
X_train = train[train.columns[1:]].to_numpy()
y_train = train['label'].to_numpy()
X_test = test[test.columns[1:]].to_numpy()
y_test = test['label'].to_numpy()

X_train.shape

#implemented FDA function
def FDA(X,Y):
  n_rows,n_cols = X.shape
  St = np.matmul((X - np.mean(X)).T,(X-np.mean(X)))
  Sw = np.zeros((n_cols,n_cols))
  number_classes = np.max(Y)
  for ith_class in range(number_classes+1):
    Xc = X[Y==ith_class,: ]
    Sw = Sw + np.matmul((Xc-np.mean(Xc)).T,(Xc-np.mean(Xc)))
  Sw = Sw + np.matmul((Xc-np.mean(Xc)).T,Xc-np.mean(Xc))
  #print(Sw)
  w,v = np.linalg.eigh(np.matmul(np.linalg.inv(Sw),(St-Sw)))
  W = []
  for temp,w in sorted(zip(w,v),reverse = True):
    W.append(np.array(w))
  W = np.array(W[:number_classes])
  #print(W)
  return W

#coefficent vector
W = FDA(X_train,y_train)

W.T.shape

lda = LinearDiscriminantAnalysis()

#projecting training data using W for both training and testing data
Y_train_t = np.matmul(X_train,W.T)
Y_test_t = np.matmul(X_test,W.T)

#applying LDA on the projected data Y for classifying the testing samples
lda.fit(Y_train_t,y_train)

#accuracy
print("Accuracy ", lda.score(Y_test_t,y_test))

#class-wise accuracy for testing dataset
y_pred = lda.predict(Y_test_t)
CM = confusion_matrix(y_test,y_pred)

n = len(CM)
print("Class-wise accuracy")
for i in range(n):
  s = CM[i].sum()
  accuracy = CM[i][i]/s
  print("Label",i," - ",accuracy)

CM